{
	"name": "my new notebook",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "testSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e5820d59-9cae-46d9-81d1-e818d2f75d1a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/35147e2b-e88a-4125-b1a7-d528fb2d1248/resourceGroups/synapse_test/providers/Microsoft.Synapse/workspaces/synapse-test-pepe0806/bigDataPools/testSparkPool",
				"name": "testSparkPool",
				"type": "Spark",
				"endpoint": "https://synapse-test-pepe0806.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyspark.sql.functions as sf"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Reading files from ADLS and saving them in the Hive Metastore\r\n",
					"\r\n",
					"Reading some csv files from an ADLS container and saving them in datframes"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_Cars = spark.read.csv(\"abfss://adf-example@teststorageaccount3414.dfs.core.windows.net/dbo_Cars.csv\", header = True)"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_Cars.show()"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_countries = spark.read.csv(\"abfss://adf-example@teststorageaccount3414.dfs.core.windows.net/dbo_Countries.csv\", header='true')"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_countries.show()"
				],
				"execution_count": 47
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Creating a test DB and a test schema to save the dataframes in tables"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"CREATE DATABASE IF NOT EXISTS test_database\")"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"CREATE SCHEMA IF NOT EXISTS test_schema\")"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_Cars.write.mode(\"overwrite\").saveAsTable(\"test_schema.cars_table\")\r\n",
					"df_countries.write.mode(\"overwrite\").saveAsTable(\"test_schema.countries_table\")"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"SELECT * FROM test_schema.countries_table\").show()"
				],
				"execution_count": 51
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Just checking that the tables work!"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"select * from test_schema.cars_table\").show()"
				],
				"execution_count": 52
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Normal Hive metastore commands also works in Synapse Notebooks"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"show tables in test_schema\").show()"
				],
				"execution_count": 53
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Workgin with Azure Key Vault to retrieve secrets\r\n",
					"\r\n",
					"This interaction uses the mssparkutils library to get the secrets. Note that you first have to set up a linked service with the details of the Key Vault. \r\n",
					"\r\n",
					"Pretty important to note that the getSecret function has two different versions. One is called with only two parameters as follows: \r\n",
					"\r\n",
					"The first parameter is the name of the key vault and the second is the name of the secret. \r\n",
					"This will work with an interactive session but **it won't work when running the notebook from a pipeline**.\r\n",
					"\r\n",
					"mssparkutils.credentials.getSecret(\"databricksKeyVault0992\",\"SPSECRET\") \r\n",
					"\r\n",
					"The second of using the getSecret function is to use 3 parameters as follows. **This version will work both with the interactive session and with the job session when running the notebook from a pipeline.**\r\n",
					"\r\n",
					"mssparkutils.credentials.getSecret(\"databricksKeyVault0992\",\"SPSECRET\",\"key_vault_test_service\")"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# getSecret(akvName, secret): returns AKV secret for a given akvName, secret key\r\n",
					"#letsee = mssparkutils.credentials.getSecret(\"databricksKeyVault0992\",\"SPSECRET\")\r\n",
					"letsee = mssparkutils.credentials.getSecret(\"databricksKeyVault0992\",\"SPSECRET\",\"key_vault_test_service\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Although printing the secret also shows the string 'REDACTED' as in Databricks, the 'hack' to show the password by printing letter by letter is also present in synapse."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(letsee)"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for item in letsee:\r\n",
					"    print(item)"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.credentials.help()\r\n",
					""
				],
				"execution_count": 57
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Joins and spark execution plan\r\n",
					"Let's try a join!\r\n",
					"\r\n",
					"Note: the actual physical query plan can be seen by clicking on the \"Open Spark UI\" button at the bottom right of the cell. "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"spark.sql(\"select * from test_schema.cars_table ct left join test_schema.countries_table cot on ct.ID = cot.ID \").show()"
				],
				"execution_count": 58
			}
		]
	}
}